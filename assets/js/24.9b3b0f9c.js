(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{474:function(t,s,a){"use strict";a.r(s);var n=a(59),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程"}},[t._v("#")]),t._v(" 进程")]),t._v(" "),a("blockquote",[a("p",[t._v("进程是程序的一个实例")])]),t._v(" "),a("ol",[a("li",[t._v("单道程序：内存中只能运行一个程序")]),t._v(" "),a("li",[t._v("多道程序：多个程序穿插运行，有利于提高CPU利用率")])]),t._v(" "),a("h2",{attrs:{id:"相关概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#相关概念"}},[t._v("#")]),t._v(" 相关概念")]),t._v(" "),a("h3",{attrs:{id:"时间片"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#时间片"}},[t._v("#")]),t._v(" 时间片")]),t._v(" "),a("blockquote",[a("p",[t._v("由操作系统内核分配给每个进程。首先，内核会给每个进程分配相同初始时间片， 当所有进程都处于时间片耗尽，重新分配时间片。")])]),t._v(" "),a("h3",{attrs:{id:"并发与并行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#并发与并行"}},[t._v("#")]),t._v(" 并发与并行")]),t._v(" "),a("blockquote",[a("p",[t._v("并行（parallel): 同一时刻， 多条指令在多个处理器上同时执行。")]),t._v(" "),a("p",[t._v("并发：指同一时刻，只能有一个一条指令。多个进程快速交替执行。")])]),t._v(" "),a("h3",{attrs:{id:"进程号和相关函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程号和相关函数"}},[t._v("#")]),t._v(" 进程号和相关函数")]),t._v(" "),a("blockquote",[a("p",[t._v("每个进程都是一个唯一的进程号，"),a("code",[t._v("pid_t")]),t._v("类型， 范围"),a("code",[t._v("0-32767")])])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("每个进程（除了init）都是由另一个进程创建，父进程创建子进程，父进程的"),a("code",[t._v("pid_t")]),t._v("为称为"),a("code",[t._v("PPID")])])]),t._v(" "),a("li",[a("p",[t._v("进程组是一个或多个进程的集合。关联的进程号有一个进程组号"),a("code",[t._v("PGID")]),t._v(".默认情况下，当前进程号当作当前进程组号。")])]),t._v(" "),a("li",[a("p",[t._v("相关函数")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pid_t")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getpid")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pid_t")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getppid")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pid_t")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getpgid")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pid_t")]),t._v(" pid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])]),t._v(" "),a("h2",{attrs:{id:"进程管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程管理"}},[t._v("#")]),t._v(" 进程管理")]),t._v(" "),a("blockquote",[a("p",[t._v("PCB(Processing Control Block)，进程控制块，维护进程相关的信息")])]),t._v(" "),a("ul",[a("li",[t._v("进程id：用pit_t类型表示")]),t._v(" "),a("li",[t._v("进程的状态：就绪、运行、挂起、停止等状态")]),t._v(" "),a("li",[t._v("进程切换时需要保存和恢复的一些CPU寄存器")]),t._v(" "),a("li",[t._v("描述虚拟地址空间的信息")]),t._v(" "),a("li",[t._v("描述控制终端的信息")]),t._v(" "),a("li",[t._v("当前工作目录")]),t._v(" "),a("li",[t._v("umask掩码")]),t._v(" "),a("li",[t._v("文件描述符，包含很多指向file结构体的指针")]),t._v(" "),a("li",[t._v("用户id和组id")]),t._v(" "),a("li",[t._v("会话（Session）和进程组")]),t._v(" "),a("li",[t._v("进程可以适用的资源上限（Rescource Limit）")])]),t._v(" "),a("h2",{attrs:{id:"进程状态转移"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程状态转移"}},[t._v("#")]),t._v(" 进程状态转移")]),t._v(" "),a("blockquote",[a("p",[t._v("三态模型：就绪、运行、阻塞")]),t._v(" "),a("p",[t._v("五态模型：新建、就绪、运行、阻塞、终止")])]),t._v(" "),a("h3",{attrs:{id:"查看进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看进程"}},[t._v("#")]),t._v(" 查看进程")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ps")]),t._v(" aux / ajx\n")])])]),a("ul",[a("li",[t._v("STAT 相关参数含义（查吧）")]),t._v(" "),a("li",[t._v("实时显示进程动态")])]),t._v(" "),a("h3",{attrs:{id:"杀死进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#杀死进程"}},[t._v("#")]),t._v(" 杀死进程")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("kill")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-signal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" pid\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("kill")]),t._v(" -l "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#列出所有信号")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("kill")]),t._v(" -9 pid"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# or -SIGKILL ")]),t._v("\n")])])]),a("h2",{attrs:{id:"进程创建及父子进程调试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程创建及父子进程调试"}},[t._v("#")]),t._v(" 进程创建及父子进程调试")]),t._v(" "),a("ol",[a("li",[a("p",[a("code",[t._v("pid_t fork(void)")]),t._v(" 创建进程。 pid_t 本质是int。")]),t._v(" "),a("div",{staticClass:"language-C extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<sys.types.h>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//宏文件")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<unistd.h>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//std unix")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pid_t")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fork")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\nreturn: 成功返回pid >= 0\n\t\t失败返回-1\n\t\t返回值会返回两次，一次是父进程（pid > 0），一次在子进程。(pid = 0)\n\t\t\n失败原因：\n\t1. 进程数到达上限。 errno被设置为EAGAIN\n\t2. 系统内存不足。errno被设置为ENOMEM\n\t\n原理： \n\t1.写时候拷贝（copy-on-write）\n\t2.只有写的时候才拷贝，否则共享地址和文件\n*/")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pid_t")]),t._v(" pid "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fork")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pid "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//父进程")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"I am parent process, pid %d, ppid: %d"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getpid")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getppid")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pid "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 子进程")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"I am child process, pid %d, ppid: %d"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getpid")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getppid")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("父子进程的异同")]),t._v(" "),a("ol",[a("li",[t._v("不同点\n"),a("ol",[a("li",[a("code",[t._v("pid = fork()")]),t._v("值不同")]),t._v(" "),a("li",[t._v("PCB内容不同： pid、ppid不同、信号集")])])]),t._v(" "),a("li",[t._v("相同点\n"),a("ol",[a("li",[t._v("无写入的情况下，用户区的数据，文件描述符共享")])])])])]),t._v(" "),a("li",[a("p",[t._v("GDB多进程调试")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("设置调试模式：子进程还是父进程")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("show follow-fork-mode\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" follow-fork-mode "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("child "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" parent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("设置调试模式：调试当前程序时，其他程序是否运行")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("show detach-on-fork\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" detach-on-fork "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("on "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" off"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("其他命令")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("info inferiors //查看调试进程\ninferior "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("id")]),t._v(" //切换调试进程\ndetach inferiors "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("id")]),t._v(" //使进程分离\n")])])])])])])]),t._v(" "),a("h2",{attrs:{id:"exec-函数族"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#exec-函数族"}},[t._v("#")]),t._v(" exec 函数族")]),t._v(" "),a("blockquote",[a("p",[t._v("功能相同或者相似的一系列函数。")])]),t._v(" "),a("h3",{attrs:{id:"作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作用"}},[t._v("#")]),t._v(" 作用")]),t._v(" "),a("p",[t._v("根据指定文件路径，找到并执行，用它来取代调用进程的内容。即，在调用进程内部执行一个可执行文件。")]),t._v(" "),a("h3",{attrs:{id:"返回值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#返回值"}},[t._v("#")]),t._v(" 返回值")]),t._v(" "),a("blockquote",[a("p",[t._v("成功的话无返回值，失败返回-1")])]),t._v(" "),a("p",[t._v("因为调用进程的实体，包括代码段，数据段和堆栈等都已经被新的内容取代，只留下进程ID等一些表面信息保持原样。失败原代码段才存在，才能接收-1。")]),t._v(" "),a("h3",{attrs:{id:"相关函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#相关函数"}},[t._v("#")]),t._v(" 相关函数")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("execl")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//absolute path")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("execlp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" file"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//会找系统环境变量")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("execv")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("execvp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("execvpe")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("execve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\nl(list) 参数地址列表， 以空指针结尾\nv(vector) 存有各参数地址的指针数组的地址。\np(path) 按PATH环境变量指定的目录搜索\ne(environment) 按有环境变量字符串地址的指针数组的地址。\n*/")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);